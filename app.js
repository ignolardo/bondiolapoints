const express = require("express");
const fetch = require("node-fetch");
globalThis.fetch = fetch;
const path = require('path');
const fs = require('fs');
const NodeRSA = require('node-rsa');
const {GoogleSpreadsheet} = require('google-spreadsheet');
const app = express();


const key = new NodeRSA("-----BEGIN RSA PRIVATE KEY-----\n"+
                        "MIIBOQIBAAJBAMqRF3QcOwcdkvo6XekQeJdXECLZV6nXxNrbbKSUa5qmglX+NmGC\n"+
                        "z37AnL+KQpGVlvSh6vQoUy/rrkMPWYi3LIMCAwEAAQJAMj7LEoHuIlWzn13a7XSo\n"+
                        "dOGjnwFKPVbH/YFv8WLfTfyOVnooSzbQHDf1ysS4iOHuFd0t4OIP5ESRDAP0bjvA\n"+
                        "AQIhAOldO8VKmmVV10HIuwPVuAtW6QkI1Yp+XD0qlp+F83rDAiEA3jcdK3YqgQqM\n"+
                        "WOfHIUqRFtT6VdryRI/6cdejDN+860ECIGpQmGdkenyKI/wLV/ACUMuRt67vAGIM\n"+
                        "+TbAjUh1vRwDAiALKYGRmVHxQXJjVOEvzusS1ofsoB7jSsgtx8Ms9mArAQIgIwfa\n"+
                        "moH41gJRvPL2iuOGqEYAc+lZMguuoLg4eAj90Lk=\n"+
                        "-----END RSA PRIVATE KEY-----\n");


app.set('PORT', process.env.PORT || 3000);
app.set('SEPARATOR', ',');
app.set('view engine', 'ejs');
/* app.use("/public", express.static(path.join(__dirname, './public'))); */

app.listen(app.get('PORT'), ()=>{
    console.log(`Server listen on port: ${app.get('PORT')}`);
});

const doc = new GoogleSpreadsheet("1iu3Qk5y7RBsnPmX6bcALv6nP20eHMT0B8lw-7-LwDm0");

async function Hello()
{
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: "bondiola@bondiolapoints.iam.gserviceaccount.com",
        private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDBOuinHLFmNKG5\n5ForWeaebPbp4DcsNxMQxuTGMj+fWgG2Vr6rDaYt7sgHvY6KP0FkMfNtuwEtvczc\nZkIRV9zeXmiIL0A8LG9Y8xLZ0euvsQxhsloucvLA27692KSA+cyOkzzrfn+DEsoD\nzoziq7d7eLS5m+p6i8oYVcesUSWsQToAHvqwS5P6H2Y58I+wQEPu59F9iV+VzJV3\nY/k5IQlGZkZv8snRVs/27/1a+2Ag5BFeShE61M7pOfV5P48ZfyrOoSfei9vtPoQM\n6U1u+e2jsLl2BKlqjfuDl9g2P01ZYCqePHV12ovcInIuIj+lXNahuzaktIHBDAMU\nKkYXMyyzAgMBAAECggEARkMb7wwta4su1Y/1w7a0d54KqJ9ZoI/ENIEGFhWWceTC\nI6HmQf+8Eg62GK5yQs3egsbxC9EIjC/saqYaVwEadJdirkZ0No03zeHRVHgTGfco\nl+vJBAPTRpKBCLpakvWCTsO2TrFYP3qZD4pPS2sCVHjfSnCp8fabvX6PlRaKutf5\nD3SBOT31CrDu2pXLTb5WX3mWAs3mFg/4VsGJUau7yGA7yevAWLbep/EeM7fBCeq9\ntEY8ySCarbDU25wui6+DPoghThfrmRg+Fn+bO6vKXpVMe3Ot7pFvXLe6BnJmhUvu\nRWuP1dVMUiIghXIYhjxIaIyQ1XMVs8TrzktwbiBR+QKBgQDoOFHulgGAhjFD/qMu\npPxm1zBS+gTc2qVbJCI97jlWjrXSHmE7xJkiAoo6ZqSNi7z00yZqz7zEMudYPCLE\nE+mHs3Os64xtqjnjd4cY3CZ/tEa1iABoKerB3+GUD09r97LQ6cji4JeamHIJA8Oc\nqVtSnXvlOU+8jLvuSlB6jqlw+QKBgQDVBHafJNTKkurV1J4+pWBBQhB1an5tG1Sf\nGTi3wu5MxmrIKZb83AFOH169YB6WiQ8d4tup596hZQMpcg/fnH66u+Bo4huruDyp\n6+xjtXRG6K//NKnFki4km/4VNJHysOdkQBLw1BUY1dTEas1ZfFwcf3mpedUdODHm\nNN7idQxiCwKBgHho66LoyTKZYmY9XOPMzMuOfRIpbegOv3r4y4CNS9HkAcdH1Wcm\nU7jc1Evf+Scj9ACGk/8CZIDfXDHWTLibEpY4qJxbLt+WSpn12mk7jgLduWRbdsqM\nIZwRuGgLYEU9lMzazD1H85RHw6mE+CL9dcrqudlr1DqSRsgSZJSH8LgRAoGAe22o\npjIbMn3KoLggMUB185oqGz7nnqTVdZKRsLi8h7P4r56ZpE5+WxwGM0j8sFEedzy5\n90spTu9O07cJx5HQRLcUIvHRAsEwNW1EfcnoZCXzxLZpINfA8OmKYhMh9jPW/9m4\nn97jko5kSKNx9UX/wWuDvVWgzNuA3lkIRMN5t10CgYBn8kAFPzrSUR0/1thXCYHg\nuCUNm7Q9VcA7v3XqgYl/wrAt/vGneUUbo0t8TW/0tZJPj2Qto+0wcK5hCWT+AEim\n04slfOVDg0d5XG4evR5F5MZNoI7ed8vqlrE+8gAzAnatiLyXdUrWlmG4LCc0AITD\nOucpGCxoLLJ/W/6Bk6rbzQ==\n-----END PRIVATE KEY-----\n",
    });
    
    await doc.loadInfo(); // loads document properties and worksheets
    console.log(doc.title);
}

Hello();


app.get('/', (req, res)=>{
    res.send(".");
});

app.get('/:id', async (req, res)=>{
    if(req.params.id.length > 4)
    {
       /*  res.sendFile(path.join(__dirname, './public/qrScanned.html')); */

       // If id param includes + add points
       if(req.params.id.includes(app.get('SEPARATOR')))
       {
            /* fisrtMode(req, res); */
            secondMode(req, res);
       } 
        // If id param doesn't include + render Scanned view 
        else {
            res.render('qrScanned', {code: req.params.id});
       }
    } 
    else {
        res.sendFile(path.join(__dirname, './public/qrUsed.html'));
    }
});


async function secondMode(req, res)
{
    var pointSheet = doc.sheetsByIndex[0];

    await pointSheet.loadCells('A1:B1');
    var usersData = pointSheet.getCell(0,0);
    var otherData = pointSheet.getCell(0,1);

    var userDataJSON = JSON.parse(usersData.value);
    var otherDataJSON = JSON.parse(otherData.value);
    
    const _email = req.params.id.split(app.get('SEPARATOR'))[1];
    const _code = req.params.id.split(app.get('SEPARATOR'))[0];

    /* userDataJSON.users.foreach(obj => {
        console.log(`${obj.user}${obj.points}`);
    }); */
    
    var usersArray = userDataJSON.users;
    var usedCodesArray = otherDataJSON.usedCodes;
    
    var founded = false;
    
    var theCode = '';

    try{
        theCode = await key.decrypt((await generateOriginalCode(_code)).toString(), 'utf8').toString();
    } catch {
        console.log('No decrypted');
    }

    // Detect valid code //
    if(validCode(theCode))
    {
        if(usedCodesArray.includes(theCode))
        {
            res.render('qrUsed');
            
        } 
        else 
        {

            // _________   If user exist add 1 point   _________//
            for(let i = 0; i < usersArray.length; i++)
            {

            if(usersArray[i].user == _email)
            {
                usersArray[i].points = usersArray[i].points + 1;
                usersData.value = JSON.stringify(userDataJSON);
                founded = true;
                break;
                
            } else {
                founded = false;
                continue;
            }
            
            }
        
            // If doesn't exist create it
            if(!founded)
            {
                usersArray.push({"user":_email, "points":1});
                usersData.value = JSON.stringify(userDataJSON);
                otherDataJSON.userLength = otherDataJSON.userLenght + 1;
            }
            
            // Try to save and add an used code
            try{
                await pointSheet.saveUpdatedCells();
                usedCodesArray.push(theCode);
                otherData.value = JSON.stringify(otherDataJSON);
                await pointSheet.saveUpdatedCells();
                res.render('qrDone');
            } catch {
                res.render('qrError');
            }

        }

    } else {
        res.render('qrError');
    }
}

async function generateOriginalCode(code)
{
    var originalCode = code+'';
    if(code.includes('!'))
    {
        var indexes = code.split('!')[1].includes('*')?code.split('!')[1].split('*'):[code.split('!')[1]];
    
        for(let i = 0; i < indexes.length; i++)
        {
            originalCode = originalCode.insert(parseInt(indexes[i])+i, '/');
        }
        originalCode = originalCode.split('!')[0];
    }
    return originalCode;
}

function validCode(code)
{
    var result = false;
    if(code == ''){
        result = false;
    }
    else {
        // Instrucciones //
        try{
            const newCode = code;
            if(newCode.charAt(0) == '0' && newCode.charAt(Math.floor(newCode.length/2)) == '0' && newCode.charAt(newCode.length-1) == '0')
            {
                result = true;
            } else {
                console.log('Código invalido');
                result = false;
            }
        } catch {
            console.log('Ocurrió un error');
            result = false;
        }
    }
    return result;
}


async function fisrtMode(req, res)
{
    // Get Sheet Object
    var points = doc.sheetsByIndex[0];

    // Initialize user var for while loop
    var user = '';

    // Initialize count var for while loop
    var count = 0;

    // Load user lenght cell and get the lenght
    await points.loadCells('C1:C1');
    var usersLenghtCell = await points.getCell(0,2);
    var usersLenght = parseInt(usersLenghtCell.value);

    // While loop for try to get user cell
    while(user != req.params.id.split(app.get('SEPARATOR'))[1] && count <= usersLenght)
    {
        // Load user cell by count number
        await points.loadCells(`A${count+2}:A${count+2}`);

        // Get the current user cell
        var userObj = await points.getCell(count+1, 0);

        // Get user email from current user cell
        user = userObj.value == null? 'null' : userObj.value.toString().split('/')[0];

        // Update count number
        count++;

        // If user cell email is not the same as the user link email so reset cache (unload)
        if(user != req.params.id.split(app.get('SEPARATOR'))[1])
        {
            await points.resetLocalCache(true);
        }
    }

    // If user cell email is the same as the user link email so update de point number
    if(user == req.params.id.split(app.get('SEPARATOR'))[1])
    {
        // Get user cell
        var cell = await points.getCell(count, 0);

        // Get user cell points
        var userPoints = parseInt(cell.value.toString().split('/')[1]);
        
        // Change points value + 1
        cell.value = `${user}/${userPoints+1}`;
        
    }
    // If user cell doesn't exist, create the user cell for first time 
    else {
        // Load users length cell
        await points.loadCells('C1:C1');

        // Get users lenght cell
        var myUsersLenghtCell = await points.getCell(0,2);
        
        // Load last cell empty
        await points.loadCells(`A${usersLenght+2}:A${usersLenght+2}`);

        // Get last cell empty
        var cell = await points.getCell(usersLenght+1, 0);

        // Change empty cell value with email and 1 point
        cell.value = `${req.params.id.split(app.get('SEPARATOR'))[1]}/${1}`;

        // Change user lenght cell value + 1;
        myUsersLenghtCell.value = myUsersLenghtCell.value+1;

        // Send a messagge to console 
        console.log('Un usuario compró por primera vez');

    }
    /* await points.loadCells('A1:B1');
    for(let i = 0; i < 2; i++)
    {
        var cell = points.getCell(0,i);
        if(i == 1)
        {
            if(cell.value == null)
            {
                cell.value = 0;
            }else {
                cell.value = parseInt(cell.value)+1;
            }
        } else {
            points.getCell(0,i).value = req.params.id.split('+')[1];
        }
    } */


    // Save changed cells
    await points.saveUpdatedCells();

    // Reset cache
    await points.resetLocalCache(true);
    
    // Render the succesfully view
    res.render('qrDone', {code: req.params.id});
}



String.prototype.insert = function(index, string) {
    if (index > 0)
    {
      return this.substring(0, index) + string + this.substring(index, this.length);
    }
  
    return string + this;
};


module.exports = {app};