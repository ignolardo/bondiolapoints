const NodeRSA = require('node-rsa');
const {GoogleSpreadsheet} = require('google-spreadsheet');

const doc = new GoogleSpreadsheet("1iu3Qk5y7RBsnPmX6bcALv6nP20eHMT0B8lw-7-LwDm0");

async function LogAccount()
{
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: "bondiola@bondiolapoints.iam.gserviceaccount.com",
        private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDBOuinHLFmNKG5\n5ForWeaebPbp4DcsNxMQxuTGMj+fWgG2Vr6rDaYt7sgHvY6KP0FkMfNtuwEtvczc\nZkIRV9zeXmiIL0A8LG9Y8xLZ0euvsQxhsloucvLA27692KSA+cyOkzzrfn+DEsoD\nzoziq7d7eLS5m+p6i8oYVcesUSWsQToAHvqwS5P6H2Y58I+wQEPu59F9iV+VzJV3\nY/k5IQlGZkZv8snRVs/27/1a+2Ag5BFeShE61M7pOfV5P48ZfyrOoSfei9vtPoQM\n6U1u+e2jsLl2BKlqjfuDl9g2P01ZYCqePHV12ovcInIuIj+lXNahuzaktIHBDAMU\nKkYXMyyzAgMBAAECggEARkMb7wwta4su1Y/1w7a0d54KqJ9ZoI/ENIEGFhWWceTC\nI6HmQf+8Eg62GK5yQs3egsbxC9EIjC/saqYaVwEadJdirkZ0No03zeHRVHgTGfco\nl+vJBAPTRpKBCLpakvWCTsO2TrFYP3qZD4pPS2sCVHjfSnCp8fabvX6PlRaKutf5\nD3SBOT31CrDu2pXLTb5WX3mWAs3mFg/4VsGJUau7yGA7yevAWLbep/EeM7fBCeq9\ntEY8ySCarbDU25wui6+DPoghThfrmRg+Fn+bO6vKXpVMe3Ot7pFvXLe6BnJmhUvu\nRWuP1dVMUiIghXIYhjxIaIyQ1XMVs8TrzktwbiBR+QKBgQDoOFHulgGAhjFD/qMu\npPxm1zBS+gTc2qVbJCI97jlWjrXSHmE7xJkiAoo6ZqSNi7z00yZqz7zEMudYPCLE\nE+mHs3Os64xtqjnjd4cY3CZ/tEa1iABoKerB3+GUD09r97LQ6cji4JeamHIJA8Oc\nqVtSnXvlOU+8jLvuSlB6jqlw+QKBgQDVBHafJNTKkurV1J4+pWBBQhB1an5tG1Sf\nGTi3wu5MxmrIKZb83AFOH169YB6WiQ8d4tup596hZQMpcg/fnH66u+Bo4huruDyp\n6+xjtXRG6K//NKnFki4km/4VNJHysOdkQBLw1BUY1dTEas1ZfFwcf3mpedUdODHm\nNN7idQxiCwKBgHho66LoyTKZYmY9XOPMzMuOfRIpbegOv3r4y4CNS9HkAcdH1Wcm\nU7jc1Evf+Scj9ACGk/8CZIDfXDHWTLibEpY4qJxbLt+WSpn12mk7jgLduWRbdsqM\nIZwRuGgLYEU9lMzazD1H85RHw6mE+CL9dcrqudlr1DqSRsgSZJSH8LgRAoGAe22o\npjIbMn3KoLggMUB185oqGz7nnqTVdZKRsLi8h7P4r56ZpE5+WxwGM0j8sFEedzy5\n90spTu9O07cJx5HQRLcUIvHRAsEwNW1EfcnoZCXzxLZpINfA8OmKYhMh9jPW/9m4\nn97jko5kSKNx9UX/wWuDvVWgzNuA3lkIRMN5t10CgYBn8kAFPzrSUR0/1thXCYHg\nuCUNm7Q9VcA7v3XqgYl/wrAt/vGneUUbo0t8TW/0tZJPj2Qto+0wcK5hCWT+AEim\n04slfOVDg0d5XG4evR5F5MZNoI7ed8vqlrE+8gAzAnatiLyXdUrWlmG4LCc0AITD\nOucpGCxoLLJ/W/6Bk6rbzQ==\n-----END PRIVATE KEY-----\n",
    });
    
    await doc.loadInfo(); // loads document properties and worksheets
}

const generate = async function(n)
{
    await LogAccount();
    const _n = parseInt(n);

    var pointSheet = doc.sheetsByIndex[0];
    await pointSheet.loadCells('B1:B1');
    var otherDataCell = await pointSheet.getCell(0,1);
    var otherDataJSON = JSON.parse(otherDataCell.value);

    for(let i = 0; i < n ; i++)
    {
        var _code = generateValidCode();
        
        while(otherDataJSON.usedCodes.includes(_code))
        {
            _code = generateValidCode();
        }

        var _encrypt = new NodeRSA("-----BEGIN RSA PRIVATE KEY-----\n"+
        "MIIBOQIBAAJBAMqRF3QcOwcdkvo6XekQeJdXECLZV6nXxNrbbKSUa5qmglX+NmGC\n"+
        "z37AnL+KQpGVlvSh6vQoUy/rrkMPWYi3LIMCAwEAAQJAMj7LEoHuIlWzn13a7XSo\n"+
        "dOGjnwFKPVbH/YFv8WLfTfyOVnooSzbQHDf1ysS4iOHuFd0t4OIP5ESRDAP0bjvA\n"+
        "AQIhAOldO8VKmmVV10HIuwPVuAtW6QkI1Yp+XD0qlp+F83rDAiEA3jcdK3YqgQqM\n"+
        "WOfHIUqRFtT6VdryRI/6cdejDN+860ECIGpQmGdkenyKI/wLV/ACUMuRt67vAGIM\n"+
        "+TbAjUh1vRwDAiALKYGRmVHxQXJjVOEvzusS1ofsoB7jSsgtx8Ms9mArAQIgIwfa\n"+
        "moH41gJRvPL2iuOGqEYAc+lZMguuoLg4eAj90Lk=\n"+
        "-----END RSA PRIVATE KEY-----\n").encrypt(_code, "base64");
        /* var lastIndex = null;
        for(let i=0; i < _encrypt.length; i++)
        {
            var index = _encrypt.indexOf('/',i);
            if(lastIndex == index)
            {
                if(index == -1)
                {
                    break;
                } else {
                    continue;
                }
            } else {
                _encrypt = _encrypt.replaceAt(index, '')
                _encrypt = _encrypt.insert(_encrypt.length, `${index}-`);
                lastIndex = index;
            }
        } */

        var encryptArray = _encrypt.split('/');
        _encrypt = _encrypt.insert(_encrypt.length, '!');
        for(let i = 0, count = -1; i < encryptArray.length-1; i++)
        {
            count += encryptArray[i].length+1;
            _encrypt += (count-i).toString()+'*';
            _encrypt = _encrypt.replace('/', '');
        }
        _encrypt = _encrypt.slice(0, -1);
        console.log(_encrypt);
    }
}

function generateValidCode()
{
    const number = Math.floor(Math.random() * 9000000) + 1000000;
    var strNumber = number.toString();
    
    strNumber = strNumber.replaceAt(0, '0');
    strNumber = strNumber.replaceAt(Math.floor(strNumber.length/2), '0');
    strNumber = strNumber.replaceAt(strNumber.length-1, '0');
    console.log(strNumber);
    return strNumber;
}

const decrypt = function(text)
{
    const _decrypt = new NodeRSA("-----BEGIN RSA PRIVATE KEY-----\n"+
        "MIIBOQIBAAJBAMqRF3QcOwcdkvo6XekQeJdXECLZV6nXxNrbbKSUa5qmglX+NmGC\n"+
        "z37AnL+KQpGVlvSh6vQoUy/rrkMPWYi3LIMCAwEAAQJAMj7LEoHuIlWzn13a7XSo\n"+
        "dOGjnwFKPVbH/YFv8WLfTfyOVnooSzbQHDf1ysS4iOHuFd0t4OIP5ESRDAP0bjvA\n"+
        "AQIhAOldO8VKmmVV10HIuwPVuAtW6QkI1Yp+XD0qlp+F83rDAiEA3jcdK3YqgQqM\n"+
        "WOfHIUqRFtT6VdryRI/6cdejDN+860ECIGpQmGdkenyKI/wLV/ACUMuRt67vAGIM\n"+
        "+TbAjUh1vRwDAiALKYGRmVHxQXJjVOEvzusS1ofsoB7jSsgtx8Ms9mArAQIgIwfa\n"+
        "moH41gJRvPL2iuOGqEYAc+lZMguuoLg4eAj90Lk=\n"+
        "-----END RSA PRIVATE KEY-----\n").decrypt(text, 'utf8');
    console.log(_decrypt);
}

const keys = function (){
    const key = new NodeRSA({b: 512})
    console.log(key.exportKey("pkcs1-private"));
}


const reset = async function()
{
    await LogAccount();

    var pointSheet = doc.sheetsByIndex[0];
    await pointSheet.loadCells('A1:B1');
    var userDataCell = await pointSheet.getCell(0,0);
    var otherDataCell = await pointSheet.getCell(0,1);

    var userDataJSON = JSON.parse(userDataCell.value);
    var otherDataJSON = JSON.parse(otherDataCell.value);

    userDataJSON.users = [];
    otherDataJSON.usedCodes = [];
    otherDataJSON.userLength = 0;

    userDataCell.value = JSON.stringify(userDataJSON);
    otherDataCell.value = JSON.stringify(otherDataJSON);

    await pointSheet.saveUpdatedCells();
    console.log('Sheet reseteado con Ã©xito');
}


String.prototype.insert = function(index, string) {
    if (index > 0)
    {
      return this.substring(0, index) + string + this.substring(index, this.length);
    }
  
    return string + this;
};

String.prototype.removeCharAt = function (i) {
    var tmp = this.split(''); // convert to an array
    tmp.splice(i - 1 , 1); // remove 1 element from the array (adjusting for non-zero-indexed counts)
    return tmp.join(''); // reconstruct the string
}

String.prototype.replaceAt = function(index, replacement) {
    return this.substring(0, index) + replacement + this.substring(index + replacement.length);
}

module.exports = {keys, generate, decrypt, reset}